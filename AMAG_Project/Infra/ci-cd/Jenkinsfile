import java.net.URLEncoder

pipeline {
    agent any

    tools {
        jdk 'JDK 17'
    }

    stages {
        stage('Remove') {
            steps {
                catchError {
                    echo 'Removing Existing Project Files'
                    sh 'rm -rf S08P31D102'

                    echo 'Removing Existing Project Containers'
                    sh 'docker rm -f spring-server'

                    echo 'Removing Existing Project Images'
                    sh 'docker rmi miracle3070/share42-spring'
                    sh 'docker rmi registry.hub.docker.com/miracle3070/share42-spring'
                }
            }
        }

        stage('Checkout') {
            steps {
                echo 'Checking out the Git repository using git clone...'
                withCredentials([usernamePassword(credentialsId: 'GitLab_Account', passwordVariable: 'GIT_PASSWORD', usernameVariable: 'GIT_USERNAME')]) {
                    script {
                        // URL 인코딩을 위해 비밀번호를 인코딩합니다.
                        String encodedPassword = URLEncoder.encode(GIT_PASSWORD, "UTF-8")
                        sh "git clone https://${GIT_USERNAME}:${encodedPassword}@lab.ssafy.com/s08-final/S08P31D102.git"
                    }
                }
            }
        }

        stage('Build') {
            steps {
                echo 'Building the Spring Boot project using Gradle...'
                dir('S08P31D102/AMAG_Project/Backend') {
                    sh 'chmod 755 ./gradlew'
                    sh './gradlew clean build -x test'
                }
            }
        }

        stage('Docker Build') {
            steps {
                echo 'Building Docker image...'
                dir('S08P31D102/AMAG_Project/Backend') {
                    script {
                        def dockerImage = docker.build("miracle3070/share42-spring:latest")
                    }
                }
            }
        }

        stage('Docker Deploy') {
            steps {
                echo 'Deploying Docker container...'
                script {
                    def dockerImage = docker.image("miracle3070/share42-spring:latest")
                    docker.withRegistry('https://registry.hub.docker.com', 'DockerHub_Account') {
                        dockerImage.push()
                    }
                    dockerImage.run('-p 8088:8088 --name spring-server')
                }
            }
        }
    }
}